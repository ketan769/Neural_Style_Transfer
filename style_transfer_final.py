# -*- coding: utf-8 -*-
"""style_transfer_final.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16q9Jx8ALKsB0VZaf66ZRwqZKvltxTr1m
"""

import tensorflow as tf 
import numpy as np 
import os 
import matplotlib.pyplot as plt
from google.colab import drive

tf.enable_eager_execution()
tf.executing_eagerly()

drive.mount('/content/drive')

os.chdir('/content/drive/My Drive/Artistic style transfer')
img_list=os.listdir('/content/drive/My Drive/Artistic style transfer')

def load_img(path):
  img=tf.io.read_file(path)
  img=tf.image.decode_image(img)
  
  img=tf.image.convert_image_dtype(img,dtype=tf.float32)
  
  img=tf.image.resize(img,(512,512))
  print(img.shape)

  img=img[tf.newaxis,:]
  return img

c=load_img(img_list[-1])

def imshow(image):
  plt.imshow(image[0])

content_image=load_img(img_list[-1])
style_image=load_img(img_list[-2])
plt.figure(figsize=(20,20))
plt.subplot(121)
plt.title('Content Image')
imshow(content_image)
plt.subplot(122)
plt.title('Style Image')
imshow(style_image)

vgg=tf.keras.applications.vgg16.VGG16(weights='imagenet',include_top=False)

for i in vgg.layers:
  print (i.name)

content_layer=['block5_conv2']
style_layer=['block1_conv1',
             'block2_conv1',
             'block3_conv1', 
             'block4_conv1', 
             'block5_conv1']
num_content_layer=len(content_layer)
num_style_layer=len(style_layer)

def vgg_layer(layer_names):
  output=[vgg.get_layer(name).output for name in layer_names]
  model=tf.keras.models.Model([vgg.input],output)
  return model

def gram_matrix(input_tensor):
  result=tf.linalg.einsum('bijc,bijd->bcd',input_tensor, input_tensor)
  input_shape=tf.shape(input_tensor)
  num_loc=tf.cast(input_shape[1]*input_shape[2],tf.float32)
  return result/(num_loc)

class style_content_model():
  def __init__(self,style_layer,content_layer):
    self.vgg=vgg_layer(style_layer+content_layer)
    self.style_layer=style_layer
    self.content_layer=content_layer
    self.num_style=len(style_layer)
    self.vgg.trainable=False
  def __call__(self,inputs):
    inputs=inputs*255
    preprocessed_input=tf.keras.applications.vgg16.preprocess_input(inputs)
    outputs=self.vgg(preprocessed_input)
    style_outputs,content_outputs=(outputs[:self.num_style],outputs[self.num_style:])
    style_outputs=[gram_matrix(i) for i in style_outputs]
    content_dict={content_name:value for content_name, value in zip(self.content_layer, content_outputs)}
    style_dict={style_name:value for style_name, value in zip(self.style_layer, style_outputs)}
    
    return {'content':content_dict,'style':style_dict}

extractor=style_content_model(style_layer,content_layer)
style_targets = extractor(style_image)['style']
content_targets = extractor(content_image)['content']

style_weight=1e-1
content_weight=1e4

def style_content_loss(outputs):
  style_outputs=outputs['style']
  content_outputs=outputs['content']
  style_loss=tf.add_n([tf.reduce_mean((style_outputs[name]-style_targets[name])**2) 
                           for name in style_outputs.keys()])
  style_loss *= style_weight / num_style_layer
  content_loss = tf.add_n([tf.reduce_mean((content_outputs[name]-content_targets[name])**2) 
                             for name in content_outputs.keys()])
  content_loss *= content_weight / num_content_layer
  loss = style_loss + content_loss
  return loss

opt = tf.keras.optimizers.Adam(learning_rate=0.02, beta_1=0.99, epsilon=1e-1)

def clip_0_1(image):
  return tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)

def train_step(image):
  with tf.GradientTape() as tape:
    outputs=extractor(image)
    loss=style_content_loss(outputs)
  grad = tape.gradient(loss, image)
  opt.apply_gradients([(grad, image)])
  image.assign(clip_0_1(image))

image = tf.Variable(content_image)

for i in range(150):
#   print (i)
  train_step(image)

plt.figure(figsize=(20,20))
plt.subplot(133)
plt.title('Generated Image')

plt.imshow(image.read_value()[0])
plt.subplot(131)
plt.title('Content Image')

imshow(content_image)
plt.subplot(132)
plt.title('Style Image')

imshow(style_image)

